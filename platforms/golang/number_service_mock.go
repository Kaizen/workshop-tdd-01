// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"sync"
)

// Ensure, that NumberServiceMock does implement NumberService.
// If this is not the case, regenerate this file with moq.
var _ NumberService = &NumberServiceMock{}

// NumberServiceMock is a mock implementation of NumberService.
//
// 	func TestSomethingThatUsesNumberService(t *testing.T) {
//
// 		// make and configure a mocked NumberService
// 		mockedNumberService := &NumberServiceMock{
// 			GenerateFunc: func() int {
// 				panic("mock out the Generate method")
// 			},
// 		}
//
// 		// use mockedNumberService in code that requires NumberService
// 		// and then make assertions.
//
// 	}
type NumberServiceMock struct {
	// GenerateFunc mocks the Generate method.
	GenerateFunc func() int

	// calls tracks calls to the methods.
	calls struct {
		// Generate holds details about calls to the Generate method.
		Generate []struct {
		}
	}
	lockGenerate sync.RWMutex
}

// Generate calls GenerateFunc.
func (mock *NumberServiceMock) Generate() int {
	if mock.GenerateFunc == nil {
		panic("NumberServiceMock.GenerateFunc: method is nil but NumberService.Generate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGenerate.Lock()
	mock.calls.Generate = append(mock.calls.Generate, callInfo)
	mock.lockGenerate.Unlock()
	return mock.GenerateFunc()
}

// GenerateCalls gets all the calls that were made to Generate.
// Check the length with:
//     len(mockedNumberService.GenerateCalls())
func (mock *NumberServiceMock) GenerateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGenerate.RLock()
	calls = mock.calls.Generate
	mock.lockGenerate.RUnlock()
	return calls
}
